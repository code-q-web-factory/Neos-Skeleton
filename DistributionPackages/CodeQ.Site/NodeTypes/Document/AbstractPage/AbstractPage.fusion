prototype(CodeQ.Site:Document.AbstractPage.HeadTags) < prototype(Neos.Fusion:Component) {
    renderer = afx`
        <meta http-equiv="x-ua-compatible" content="ie=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />

        <!-- link your own css files here -->
        <link rel="stylesheet" href={StaticResource.uri('CodeQ.Site', 'Public/Frontend/index.css')} />
    `
}

prototype(CodeQ.Site:Document.AbstractPage.ScriptTags) < prototype(Neos.Fusion:Component) {
    renderer = afx`
        <script src={StaticResource.uri('CodeQ.Site', 'Public/Frontend/index.js')}></script>

        <!--
        Sitegeist.Lazybones required lazysizes, we recommend to include
        lazysizes javascript from https://github.com/aFarkas/lazysizes 
        into your own fe-build and remove this section
        -->
        <script src={StaticResource.uri('Sitegeist.Lazybones', 'Public/JavaScript/lazysizes.min.js')}></script>
    `
}

##
# This prototypes object are sequenctially rendered as strings
# and output to form the the html response.
#
# For all the base data, see Neos.Neos:Page
##
prototype(CodeQ.Site:Document.AbstractPage) < prototype(Neos.Neos:Page) {
    httpResponseHead {
        headers {
            // avoid click-jacking attacks
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
            'X-Frame-Options' = 'sameorigin'
            'X-XSS-Protection' = '1; mode=block'

            // configure from where things can be loaded
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
            // 'Content-Security-Policy' = "default-src 'self' * 'unsafe-inline' 'unsafe-eval' data: https: blob:; report-uri /csp-violation-report/"

            // declared header content-type should be used, instead of sniffing a matching mime type
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
            'X-Content-Type-Options' = 'nosniff'

            // tell browsers that it should only be accessed using HTTPS, instead of using HTTP
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
            // 'Strict-Transport-Security' = 'max-age=63072000; includeSubDomains; preload'

            // Prevent Chrome from tracking users, see https://cleanuptheweb.org/
            Permissions-Policy = 'interest-cohort=()'
        }
    }

    headTags = CodeQ.Site:Document.AbstractPage.HeadTags {
        @position = 'before closingHeadTag'
    }

    body = CodeQ.Site:Integration.Layout.Default {
        content = ''
        @process.normalize = CodeQ.UnicodeNormalizer:Normalizer
    }

    scriptTags = CodeQ.Site:Document.AbstractPage.ScriptTags {
        @position = 'before closingBodyTag'
    }
}

##
# We use Monocle to create a living styleguide for our frontend
##
prototype(CodeQ.Site:Document.AbstractPage.Monocle) < prototype(Sitegeist.Monocle:Preview.Page) {
    headTags = CodeQ.Site:Document.AbstractPage.HeadTags {
        @position = 'before closingHeadTag'
    }
    scriptTags = CodeQ.Site:Document.AbstractPage.ScriptTags {
        @position = 'before closingBodyTag'
    }
}
