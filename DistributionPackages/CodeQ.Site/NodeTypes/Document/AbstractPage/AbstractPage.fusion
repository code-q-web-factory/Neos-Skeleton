prototype(CodeQ.Site:Document.AbstractPage.HeadTags) < prototype(Neos.Fusion:Component) {
    prefetchImageSource = null

    renderer = afx`
        <meta http-equiv="x-ua-compatible" content="ie=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />

        <!-- favicons -->
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <meta name="msapplication-TileColor" content="#000000" />
        <meta name="theme-color" content="#ffffff" />

        <!--
        <link rel="prefetch" href="/_Resources/Static/Packages/CodeQ.Site/Frontend/build/fonts/AvenirRoman.woff2" as="font" type="font/woff2" crossorigin />
        -->
        <CodeQ.Site:Presentation.Atom.Image.BackgroundPreviewPrefetch @if.has={props.prefetchImageSource} imageSource={props.prefetchImageSource}/>

        <link href={StaticResource.uri('CodeQ.Site', 'Public/index.css')} rel="stylesheet" />
        <!--<style>{String.replace(StaticResource.content('CodeQ.Site', 'Public/Frontend/build/styles/index.css'), '=app.css.map', '=/_Resources/Static/Packages/CodeQ.Site/Frontend/build/styles/index.css.map')}</style>-->
    `
}

prototype(CodeQ.Site:Document.AbstractPage.ScriptTags) < prototype(Neos.Fusion:Component) {
    renderer = afx`
        <!--<script src={StaticResource.uri('CodeQ.Site', 'Public/Frontend/build/scripts/index.js')}></script>-->

        <!--
        Sitegeist.Lazybones required lazysizes, we recommend to include
        lazysizes javascript from https://github.com/aFarkas/lazysizes 
        into your own fe-build and remove this section
        -->
        <script src={StaticResource.uri('Sitegeist.Lazybones', 'Public/JavaScript/lazysizes.min.js')}></script>
    `
}

##
# This prototypes object are sequenctially rendered as strings
# and output to form the the html response.
#
# For all the base data, see Neos.Neos:Page
##
prototype(CodeQ.Site:Document.AbstractPage) < prototype(Neos.Neos:Page) {
    httpResponseHead {
        headers {
            // avoid click-jacking attacks
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
            'X-Frame-Options' = 'sameorigin'
            'X-XSS-Protection' = '1; mode=block'

            // configure from where things can be loaded
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
            // unsafe eval is needed by lottie-player.js
            'Content-Security-Policy' = "default-src 'self' * 'unsafe-inline' 'unsafe-eval' data: https: blob:; report-uri /csp-violation-report/"

            // declared header content-type should be used, instead of sniffing a matching mime type
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
            'X-Content-Type-Options' = 'nosniff'

            // tell browsers that it should only be accessed using HTTPS, instead of using HTTP
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
            'Strict-Transport-Security' = 'max-age=63072000; includeSubDomains; preload'

            // Prevent Chrome from tracking users, see https://cleanuptheweb.org/
            Permissions-Policy = 'interest-cohort=()'
        }
    }

    // prevent google & co from indexing dev and preview domains
    // Flownative Beach uses a Subcontext like "Production/Beach/Instance"
    head.metaRobotsTag.attributes.content {
        @process.hideDevContext = ${String.substr(Configuration.setting('Neos.Flow.core.context'), 0, 10) == 'Production' ? value : 'noindex,nofollow'}
    }

    // Social media fallbacks
    prototype(Neos.Seo:OpenGraphMetaTags) {
        // if not explizit set, fallback to document node images, or the site node
        image {
            heroImage {
                condition = ${Type.instance(q(node).property('heroImage'), 'Neos\Media\Domain\Model\ImageInterface')}
                renderer = ${q(node).property('heroImage')}
            }
            image {
                condition = ${Type.instance(q(node).property('image'), 'Neos\Media\Domain\Model\ImageInterface')}
                renderer = ${q(node).property('image')}
            }
            siteImage {
                condition = ${Type.instance(q(site).property('openGraphImage'), 'Neos\Media\Domain\Model\ImageInterface')}
                renderer = ${q(site).property('openGraphImage')}
            }
        }
    }
    prototype(Neos.Seo:TwitterCard) {
        // same of open graph data above
        image {
            asset {
                heroImage {
                    condition = ${Type.instance(q(node).property('heroImage'), 'Neos\Media\Domain\Model\ImageInterface')}
                    renderer = ${q(node).property('heroImage')}
                }
                image {
                    condition = ${Type.instance(q(node).property('image'), 'Neos\Media\Domain\Model\ImageInterface')}
                    renderer = ${q(node).property('image')}
                }
                siteImage {
                    condition = ${Type.instance(q(site).property('openGraphImage'), 'Neos\Media\Domain\Model\ImageInterface')}
                    renderer = ${q(site).property('openGraphImage')}
                }
            }
        }
    }

    headTags = CodeQ.Site:Document.AbstractPage.HeadTags {
        @position = 'before closingHeadTag'
        prefetchImageSource = CodeQ.Site:Mixin.HeroImage.PrefetchImageSource
    }

    body = CodeQ.Site:Integration.Layout.Default {
        content = ''
        @process.normalize = CodeQ.UnicodeNormalizer:Normalizer
    }

    scriptTags = CodeQ.Site:Document.AbstractPage.ScriptTags {
        @position = 'before closingBodyTag'
    }

    lastVisitedNodeScript = false
}

##
# We use Monocle to create a living styleguide for our frontend
##
prototype(CodeQ.Site:Document.AbstractPage.Monocle) < prototype(Sitegeist.Monocle:Preview.Page) {
    headTags = CodeQ.Site:Document.AbstractPage.HeadTags {
        @position = 'before closingHeadTag'
    }
    scriptTags = CodeQ.Site:Document.AbstractPage.ScriptTags {
        @position = 'before closingBodyTag'
    }
}
